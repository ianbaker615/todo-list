{"version":3,"sources":["components/Todo/Todo.js","components/NewTodoForm/NewTodoForm.js","components/TodoList/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","this","removeTodo","id","setState","evt","preventDefault","updateTodo","target","name","value","toggleTodo","result","className","onSubmit","type","onChange","onClick","completed","Component","NewTodoForm","handleSubmit","newTodo","uuidv4","createTodo","htmlFor","TodoList","todos","create","remove","update","toggleCompletion","filter","todo","updatedTask","updatedTodos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.24f966a3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Todo.css\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task,\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n  handleUpdate(evt) {\n    evt.preventDefault();\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n  handleToggle(evt) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n          <input\n            type=\"text\"\n            value={this.state.task}\n            name=\"task\"\n            id=\"task\"\n            onChange={this.handleChange}\n          />\n          <button>Save</button>\n        </form>\n      );\n    } else {\n      result = (\n        <li\n          className=\"Todo-task\"\n          onClick={this.handleToggle}\n        >\n          {this.props.task}\n        </li>\n      );\n    }\n    return (\n      <div className={this.props.completed ? \"Todo completed\" : \"Todo\"}>\n        {result}\n        <div className=\"Todo-buttons\">\n          <button onClick={this.toggleForm}>\n            <i className=\"fas fa-pen\" />\n          </button>\n          <button onClick={this.handleRemove}>\n            <i className=\"fas fa-trash\" />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { task: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    const newTodo = { ...this.state, id: uuidv4(), completed: false };\n    this.props.createTodo(newTodo);\n    this.setState({\n      task: \"\",\n    });\n  }\n\n  render() {\n    return (\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"task\">Todo</label>\n        <div>\n          <input\n            type=\"text\"\n            name=\"task\"\n            id=\"task\"\n            value={this.state.task}\n            onChange={this.handleChange}\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport Todo from \"../Todo/Todo\";\nimport NewTodoForm from \"../NewTodoForm/NewTodoForm\";\nimport \"./TodoList.css\"\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n  }\n\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter((todo) => todo.id !== id),\n    });\n  }\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo],\n    });\n  }\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, task: updatedTask };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  toggleCompletion(id, updatedTask) {\n    const updatedTodos = this.state.todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo) => {\n      return (\n        <Todo\n          task={todo.task}\n          key={todo.id}\n          id={todo.id}\n          completed={todo.completed}\n          removeTodo={this.remove}\n          updateTodo={this.update}\n          toggleTodo={this.toggleCompletion}\n        />\n      );\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h1>\n          Todo List <span>Made With React</span>\n        </h1>\n        <ul>{todos}</ul>\n        <NewTodoForm createTodo={this.create} />\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}